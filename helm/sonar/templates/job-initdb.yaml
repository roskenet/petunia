apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "petunia.fullname" . }}-db-init
  labels:
    {{- include "petunia.labels" . | nindent 4 }}
spec:
  ttlSecondsAfterFinished: 60
  backoffLimit: 3
  template:
    spec:
      restartPolicy: OnFailure
      volumes:
        {{- range $i, $vol := .Values.persistence.volumes }}
        - name: {{ $vol.name }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-%s" (include "petunia.fullname" $) $vol.name | trunc 63 | trimSuffix "-" }}
        {{- end }}
      containers:
        - name: psql
          image: postgres:17
          securityContext:
            runAsUser: 0
          command:
            - /bin/sh
            - -c
            - |
              echo "Adjusting permissions..."
              chown -R 1000 /opt/sonarqube/data
              chown -R 1000 /opt/sonarqube/extensions
              chown -R 1000 /opt/sonarqube/logs
              echo "Checking if user exists..."
              if ! psql -h {{ .Values.postgres.host }} -U {{ .Values.postgres.rootUser }} -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ .Values.postgres.databaseUser }}'" | grep -q 1; then
                echo "Creating user '{{ .Values.postgres.databaseUser }}'"
                psql -h {{ .Values.postgres.host }} -U {{ .Values.postgres.rootUser }} -c "CREATE USER {{ .Values.postgres.databaseUser }} WITH PASSWORD '{{ .Values.postgres.databasePassword }}';"
              else
                echo "User '{{ .Values.postgres.userName }}' already exists"
              fi
              echo "Checking if database exists..."
              if ! psql -h {{ .Values.postgres.host }} -U {{ .Values.postgres.rootUser }} -tAc "SELECT 1 FROM pg_database WHERE datname='{{ .Values.postgres.databaseName }}'" | grep -q 1; then
                echo "Creating database '{{ .Values.postgres.databaseName }}'"
                psql -h {{ .Values.postgres.host }} -U {{ .Values.postgres.rootUser }} -c "CREATE DATABASE {{ .Values.postgres.databaseName }} OWNER '{{ .Values.postgres.databaseUser }}';"
              else
                echo "Database '{{ .Values.postgres.databaseName }}' already exists"
              fi
          volumeMounts:
            {{- range $i, $vol := .Values.persistence.volumes }}
            - mountPath: {{ $vol.mountPath }}
              name: {{ $vol.name }}
            {{- end }}
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.postgres.secretName }}"
                  key: "{{ .Values.postgres.rootPasswordKey }}"
