apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template: 
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: keycloak/keycloak:26.2
        imagePullPolicy: IfNotPresent
        args: ["start-dev", "--db-url=jdbc:postgresql://postgres/keycloak", "--db=postgres", "--db-username=keycloak", "--db-password=keycloak"]
        env:
        - name: HOSTNAME
          value: keycloak
        - name: KEYCLOAK_ADMIN
          value: admin
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: Angsthase007
        - name: DB_VENDOR
          value: postgres
        - name: DB_ADDR
          value: postgres
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          value: keycloak
        - name: DB_PASSWORD
          value: keycloak
        - name: DB_DATABASE
          value: keycloak
        - name: KC_HOSTNAME
          value: "https://auth.roskenet.de"
        - name: KC_PROXY
          value: "edge"
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: KC_HOSTNAME_STRICT
          value: "false"
        ports:
        - name: service
          containerPort: 8080
#        - name: actuator
#          containerPort: 9000
#        startupProbe:
#          httpGet:
#            path: /health
#            port: actuator
#          periodSeconds: 10 
#          failureThreshold: 30
#        livenessProbe:
#          httpGet:
#            path: /health
#            port: actuator
#          periodSeconds: 5 
#          failureThreshold: 3 
#        readinessProbe:
#          httpGet:
#            path: /health
#            port: actuator
#          periodSeconds: 5
#          failureThreshold: 1

---

apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    run: keycloak
    context: keycloak
spec:
  selector:
    app: keycloak
  ports:
  - protocol: TCP
    port: 80
    targetPort: service 

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keycloak
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - auth.roskenet.de
    secretName: keycloak-tls
  rules:
  - host: "auth.roskenet.de"
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service: 
            name: keycloak
            port: 
              name: service

